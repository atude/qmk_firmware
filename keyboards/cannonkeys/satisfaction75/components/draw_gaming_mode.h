#pragma once

#include "satisfaction75.h"
#include "draw.h"
#include "helpers.h"
#include "atyu.h"
#include <stdio.h>

#ifdef OLED_GAMING_MODE_ENABLED

const char PROGMEM outline[DEFAULT_ANIM_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xa0, 0x10, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x10, 0xa0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0xf0, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xa0, 0x11, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x11, 0xa0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void draw_gaming_mode(bool show_enc_turn) {
    led_t   led_state = host_keyboard_led_state();
    uint8_t mod_state = get_mods();

    oled_write_raw_P(outline, DEFAULT_ANIM_SIZE);

    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        for (uint8_t y = 0; y < MATRIX_COLS; y++) {
            bool on = (matrix_get_row(x) & (1 << y)) > 0;

            if (on) {
                if (matrix_is_on(2, 2)) { // w
                    draw_rectangle(14, 10, 4, 8, true);
                    draw_line_v(13, 11, 9, true);
                    draw_line_v(18, 11, 9, true);
                    draw_pixel(14, 18, true);
                    draw_pixel(17, 18, true);
                }
                if (matrix_is_on(3, 1)) { // a
                    draw_line_h(5, 20, 8);
                    draw_line_h(4, 21, 8);
                    draw_rectangle(4, 22, 7, 3, true);
                }
                if (matrix_is_on(3, 2)) { // s
                    draw_line_h(15, 19, 2);
                    draw_line_h(14, 20, 4);
                    draw_line_h(13, 21, 6);
                    draw_rectangle(12, 22, 8, 4, true);
                    draw_line_h(14, 26, 4);
                    draw_line_h(15, 27, 2);
                }
                if (matrix_is_on(3, 3)) { // d
                    draw_line_h(19, 20, 8);
                    draw_line_h(20, 21, 8);
                    draw_rectangle(21, 22, 7, 3, true);
                }
                if (matrix_is_on(5, 5)) { // space
                    draw_line_h(39, 16, 7);
                    draw_line_h(38, 15, 9);
                    draw_line_h(37, 14, 11);
                    draw_line_h(38, 13, 9);
                    draw_line_h(39, 12, 7);
                    draw_line_h(40, 11, 5);
                    draw_line_h(41, 10, 3);
                    draw_line_h(42, 9, 1);
                }
            }
        }
    }

    if (mod_state & MOD_MASK_CTRL) {
        draw_line_h(39, 20, 7);
        draw_line_h(38, 21, 9);
        draw_line_h(37, 22, 11);
        draw_line_h(38, 23, 9);
        draw_line_h(39, 24, 7);
        draw_line_h(40, 25, 5);
        draw_line_h(41, 26, 3);
        draw_line_h(42, 27, 1);
    }
    if (mod_state & MOD_MASK_SHIFT) {
        draw_pixel(3, 10, true);
        draw_pixel(4, 9, true);
        draw_pixel(5, 8, true);
        draw_pixel(6, 9, true);
        draw_pixel(7, 10, true);

        draw_pixel(3, 13, true);
        draw_pixel(4, 12, true);
        draw_pixel(5, 11, true);
        draw_pixel(6, 12, true);
        draw_pixel(7, 13, true);
    } else if (tab_pressed) {
        draw_rectangle_outline(2, 8, 7, 7);
        draw_line_h(4, 10, 3);
        draw_line_h(4, 12, 3);
    }

    draw_mods_square(mod_state, enc_turn_state, show_enc_turn, 10, 1);
    switch (date_time_mode) {
        default:
        case 0:
            oled_set_cursor(is_24hr_time() ? 16 : 14, 1);
            oled_write(get_time(), false);
            break;
        case 1:
            oled_set_cursor(13, 1);
            oled_write(get_date(false), false);
            break;
        case 2:
            oled_set_cursor(18, 1);
            if (wpm() > 0) {
                oled_write(get_u8_str(wpm(), '0'), false);
            } else {
                oled_write_P(PSTR("WPM"), false);
            }
            break;
    }
    draw_info_panel(led_state, layer_state, get_enc_mode(), 10, 3, true);
};

#endif
