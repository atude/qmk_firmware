#pragma once

#include "satisfaction75.h"
#include "draw.h"
#include "helpers.h"
#include "atyu.h"
#include <stdio.h>

#ifdef OLED_GAMING_MODE_ENABLED

const char PROGMEM outline[DEFAULT_ANIM_SIZE] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x30, 0x28, 0x24, 0xe2, 0x01, 0x00, 0x00, 0x01, 0xe2, 0x24, 0x28, 0x30, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xf8, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xf8, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xfb, 0x0a, 0x0a, 0x0a, 0x0a, 0xfb, 0x80, 0x80, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x10, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x10, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static uint8_t last_pressed_num = 0;

void draw_gaming_mode(bool show_enc_turn) {
    led_t   led_state = host_keyboard_led_state();
    uint8_t mod_state = get_mods();

    oled_write_raw_P(outline, DEFAULT_ANIM_SIZE);

    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        for (uint8_t y = 0; y < MATRIX_COLS; y++) {
            bool on = (matrix_get_row(x) & (1 << y)) > 0;

            if (on) {
                if (matrix_is_on(1, 1)) { // 1
                    last_pressed_num = 1;
                }
                if (matrix_is_on(1, 2)) { // 2
                    last_pressed_num = 2;
                }
                if (matrix_is_on(1, 3)) { // 3
                    last_pressed_num = 3;
                }
                if (matrix_is_on(2, 2)) { // w
                    draw_rectangle(12, 9, 8, 9, true);
                    draw_line_h(13, 8, 6);
                }
                if (matrix_is_on(3, 1)) { // a
                    draw_rectangle(4, 18, 8, 7, true);
                    draw_line_v(3, 19, 5, true);
                }
                if (matrix_is_on(3, 2)) { // s
                    draw_rectangle(12, 18, 8, 10, true);
                    draw_line_h(13, 28, 6);
                }
                if (matrix_is_on(3, 3)) { // d
                    draw_rectangle(20, 18, 8, 7, true);
                    draw_line_v(28, 19, 5, true);
                }
                if (matrix_is_on(5, 5)) { // space
                    draw_rectangle(39, 8, 4, 9, true);
                    draw_line_h(38, 10, 6);
                    draw_line_h(37, 11, 8);
                    draw_line_h(36, 12, 10);
                }
            }
        }
    }

    if (mod_state & MOD_MASK_CTRL) {
        draw_rectangle(39, 20, 4, 9, true);
        draw_line_h(38, 26, 6);
        draw_line_h(37, 25, 8);
        draw_line_h(36, 24, 10);
    }
    if (mod_state & MOD_MASK_SHIFT) {
        draw_pixel(24, 10, true);
        draw_pixel(25, 9, true);
        draw_pixel(26, 8, true);
        draw_pixel(27, 9, true);
        draw_pixel(28, 10, true);

        draw_pixel(24, 13, true);
        draw_pixel(25, 12, true);
        draw_pixel(26, 11, true);
        draw_pixel(27, 12, true);
        draw_pixel(28, 13, true);
    }
    if (tab_pressed) {
        draw_rectangle_outline(2, 8, 7, 7);
        draw_line_h(4, 10, 3);
        draw_line_h(4, 12, 3);
    }
    switch (last_pressed_num) {
        case 1:
            draw_rectangle(59, 8, 7, 7, true);
            break;
        case 2:
            draw_rectangle(67, 8, 7, 7, true);
            break;
        case 3:
            draw_rectangle(75, 8, 7, 7, true);
            break;
        default:
            break;
    }

    oled_set_cursor(18, 1);
    if (wpm() > 0) {
        oled_write(get_u8_str(wpm(), '0'), false);
    } else {
        oled_write_P(PSTR("WPM"), false);
    }

    draw_mods_square(mod_state, enc_turn_state, show_enc_turn, 15, 1);
    draw_info_panel(led_state, layer_state, get_enc_mode(), 10, 3, true);
};

#endif
